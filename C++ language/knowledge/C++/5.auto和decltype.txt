C++11中引入的auto主要有两种用途：
自动类型推断和返回值占位；
1、自动类型推断：
	auto自动类型推断，从用于初始化表达式中推断出变量的数据类型；



注意auto是局部变量；


注意的是：
auto当使用数组的时候，变量的初始值时，推断得到的类型是指针而非数组
#include <vector>
#include <map>

using namespace std;

int main(int argc, char *argv[], char *env[])
{
// 	auto a;                 // 错误，没有初始化表达式，无法推断出a的类型
// 	auto int a = 10;        // 错误，auto临时变量的语义在C++11中已不存在, 这是旧标准的用法。

	// 1. 自动帮助推导类型
	auto a = 10;
	auto c = 'A';
	auto s("hello");
	
	// 2. 类型冗长
	map<int, map<int,int> > map_;
	map<int, map<int,int>>::const_iterator itr1 = map_.begin();
	const auto itr2 = map_.begin();
	auto ptr = []()
	{
		std::cout << "hello world" << std::endl;
	};
	
	return 0;
};

// 3. 使用模板技术时，如果某个变量的类型依赖于模板参数，
// 不使用auto将很难将由编译器自动进行确定）。
template <class T, class U>
void Multiply(T t, U u)
{
	auto v = t * u;
}


decltype用法：
	有的时候我们还会遇到这种情况，我们希望从表达式中推断出要定义变量的类型，但却不想用表达式的值去初始化变量。还有可能是函数
的返回类型为某表达式的的值类型。在这些时候auto显得就无力了，所以C++11又引入了第二种类型说明符decltype，它的作用是选择并返回操
作数的数据类型。在此过程中，编译器只是分析表达式并得到它的类型，却不进行实际的计算表达式的值。
	
	decltype(f()) sum = x;// sum的类型就是函数f的返回值类型。
	
	const int ci = 42, &cj = ci;
	
	decltype(ci) x = 0;   // x 类型为const int
	auto z = ci;          // z 类型为int
	
	decltype(cj) y = x;   // y 类型为const int&
	auto h = cj;          // h 类型为int

decltype 和 auto 区别

decltype在处理顶层const和引用的方式与auto有些许不同，如果decltype使用的表达式是一个变量，则decltype返回该变量的类型
(包括顶层const和引用在内)。

	const int ci = 42, &cj = ci;
	
	decltype(ci) x = 0;   // x 类型为const int
	auto z = ci;          // z 类型为int
	
	decltype(cj) y = x;   // y 类型为const int&
	auto h = cj;          // h 类型为int	


?	
?	
?	